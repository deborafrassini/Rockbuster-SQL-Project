## Top 10 Movies Rented.

SELECT C.title, COUNT(A.rental_id) AS times_rented

FROM rental A
INNER JOIN inventory B on A.inventory_id = B.inventory_id
INNER JOIN film C on B.film_id = C.film_id

GROUP by C.title
ORDER BY times_rented DESC
LIMIT 10
##__________________________________________________________________________
## Genres with Lowest Average Rental Rate -- Lowest 5.

SELECT C.name as genre, ROUND(AVG(rental_rate), 2) as avg_rental_rate

FROM film A
INNER JOIN film_category B ON A.film_id = B.film_id
INNER JOIN category C ON B.category_id = C.category_id

GROUP BY genre
ORDER BY avg_rental_rate ASC
LIMIT 5
##__________________________________________________________________________
## Count Customers and Total Revenue per Country

SELECT E.country, SUM(amount) as total_revenue, 
COUNT(DISTINCT B.customer_id) as customer_count

FROM payment A
INNER JOIN customer B on A.customer_id = B.customer_id
INNER JOIN address C on B.address_id = C.address_id
INNER JOIN city D on C.city_id = D.city_id
INNER JOIN country E on D.country_id = E.country_id

GROUP BY E.country
ORDER BY total_revenue DESC

##__________________________________________________________________________
## Genres with Biggest Film collections

SELECT C.name as genre, COUNT(A.film_id) as film_count

FROM film A
INNER JOIN film_category B ON A.film_id = B.film_id
INNER JOIN category C ON B.category_id = C.category_id

GROUP BY genre
ORDER BY film_count DESC
LIMIT 10
__________________________________________________________________________
## Ratings that generated more Revenue.

SELECT D.rating, SUM(amount) as total_revenue

FROM payment A
INNER JOIN rental B ON A.rental_id = B.rental_id
INNER JOIN inventory C ON B.inventory_id = C.inventory_id
INNER JOIN film D ON C.film_id = D.film_id

GROUP BY D.rating
ORDER BY total_revenue ASC

##__________________________________________________________________________
## The Presentation shown in the repository posses the visualizations for the 
## Queries shown in this file.
